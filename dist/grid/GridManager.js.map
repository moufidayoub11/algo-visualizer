{"version":3,"sources":["GridManager.js"],"names":["StateManager","GridAnimator","GridCreator","GridManager","constructor","gridElement","this","DIM","yOffset","getBoundingClientRect","top","rows","Math","floor","window","innerHeight","cols","innerWidth","stateManager","setGridElement","setRows","setCols","gridCreator","gridAnimator","addEventListener","e","handleEvents","createGrid","visualize","type","clearPaths","handleAlgoChange","newAlgo","currentAlgo","addRandomWalls","clearGrid","reset","setAnimationSpeed","speed","setSpeed","setWallAnimationSpeed"],"mappings":"OAAOA,iBAAkB,4BAClBC,iBAAkB,2BAClBC,gBAAiB,kCAET,MAAMC,YAEjBC,WAAAA,CAAYC,GACRC,KAAKC,IAAM,GACXD,KAAKE,QAAUH,EAAYI,wBAAwBC,IACnDJ,KAAKK,KAAOC,KAAKC,OAAOC,OAAOC,YAAcT,KAAKE,SAAWF,KAAKC,KAClED,KAAKU,KAAOJ,KAAKC,MAAMC,OAAOG,WAAaX,KAAKC,KAEhD,MAAMW,EAAe,IAAIlB,aACzBkB,EAAaC,eAAed,GAC5Ba,EAAaE,QAAQd,KAAKK,MAC1BO,EAAaG,QAAQf,KAAKU,MAE1BV,KAAKgB,YAAc,IAAIpB,YACvBI,KAAKiB,aAAe,IAAItB,aAExBI,EAAYmB,iBAAiB,aAAcC,GACvCnB,KAAKgB,YAAYI,aAAaD,EAAG,eAErCpB,EAAYmB,iBAAiB,aAAcC,GACvCnB,KAAKgB,YAAYI,aAAaD,EAAG,eAErCpB,EAAYmB,iBAAiB,WAAYC,GACrCnB,KAAKgB,YAAYI,aAAaD,EAAG,YAExC,CAEDE,UAAAA,GACIrB,KAAKgB,YAAYK,YACpB,CAEc,eAATC,CAAUC,GACZvB,KAAKgB,YAAYQ,mBACXxB,KAAKiB,aAAaK,UAAUC,EACrC,CAEDE,gBAAAA,CAAiBC,EAASC,GACtB3B,KAAKgB,YAAYS,iBAAiBC,EAASC,EAC9C,CAEmB,oBAAdC,SACI5B,KAAKgB,YAAYY,gBAC1B,CAEDC,SAAAA,GACI7B,KAAKiB,aAAaa,QAClB9B,KAAKgB,YAAYa,WACpB,CAEDE,iBAAAA,CAAkBC,GACdhC,KAAKiB,aAAagB,SAASD,EAC9B,CAEDE,qBAAAA,CAAsBF,GAClBhC,KAAKgB,YAAYkB,sBAAsBF,EAC1C","file":"GridManager.js","sourcesContent":["import StateManager from \"../StateManager.js\";\nimport GridAnimator from \"./GridAnimator.js\";\nimport GridCreator from \"./GridCreator.js\";\n\nexport default class GridManager {\n    /** @param {HTMLElement} gridElement  */\n    constructor(gridElement) {\n        this.DIM = 25;\n        this.yOffset = gridElement.getBoundingClientRect().top;\n        this.rows = Math.floor((window.innerHeight - this.yOffset) / this.DIM);\n        this.cols = Math.floor(window.innerWidth / this.DIM);\n\n        const stateManager = new StateManager();\n        stateManager.setGridElement(gridElement);\n        stateManager.setRows(this.rows);\n        stateManager.setCols(this.cols);\n\n        this.gridCreator = new GridCreator();\n        this.gridAnimator = new GridAnimator();\n\n        gridElement.addEventListener(\"mousedown\", (e) =>\n            this.gridCreator.handleEvents(e, \"mousedown\")\n        );\n        gridElement.addEventListener(\"mousemove\", (e) =>\n            this.gridCreator.handleEvents(e, \"mousemove\")\n        );\n        gridElement.addEventListener(\"mouseup\", (e) =>\n            this.gridCreator.handleEvents(e, \"mouseup\")\n        );\n    }\n\n    createGrid() {\n        this.gridCreator.createGrid();\n    }\n\n    async visualize(type) {\n        this.gridCreator.clearPaths();\n        await this.gridAnimator.visualize(type);\n    }\n\n    handleAlgoChange(newAlgo, currentAlgo) {\n        this.gridCreator.handleAlgoChange(newAlgo, currentAlgo);\n    }\n\n    async addRandomWalls() {\n        await this.gridCreator.addRandomWalls();\n    }\n\n    clearGrid() {\n        this.gridAnimator.reset();\n        this.gridCreator.clearGrid();\n    }\n\n    setAnimationSpeed(speed) {\n        this.gridAnimator.setSpeed(speed);\n    }\n\n    setWallAnimationSpeed(speed) {\n        this.gridCreator.setWallAnimationSpeed(speed);\n    }\n}\n"]}