import StateManager from"../StateManager.js";import Node from"../node/Node.js";import Utils from"../utils/Utils.js";import WallGenerator from"../walls/WallGenerator.js";const VISITED_COLOR="rgba(0, 0, 66, 0.75)",CLOSED_COLOR="rgba(0, 190, 218, 0.75)";export default class GridCreator{constructor(){this.stateManager=new StateManager,this.gridElement=this.stateManager.getGridElement(),this.nodes=[],this.nodesElements=[],this.is_mouse_pressed=!1,this.add_wall=!1,this.currently_moving=null,this.last_hoverd_node=null,this.wallGenerationTimeouts=[],this.isGeneratingWalls=!1}createGrid(){if(this.stateManager.getState())return;this.stateManager.setState(!0),this.rows=this.stateManager.getRows(),this.cols=this.stateManager.getCols(),this.createNodes();const t=this.gridElement;t.innerHTML="",this.nodesElements=[];for(let s=0;s<this.rows;s++){const e=document.createElement("tr");for(let t=0;t<this.cols;t++){const i=document.createElement("td");i.id=`node-${s}-${t}`,i.className="node";const n=this.nodes[s*this.cols+t];(n.is_start||n.is_finish)&&Utils.sleep(250).then((()=>{i.classList.add(n.is_start?"node-start":"node-finish")})),this.nodesElements.push(i),e.appendChild(i)}t.appendChild(e)}this.stateManager.setState(!1),this.stateManager.setNodeElements(this.nodesElements)}createNodes(){this.nodes=[];const t=Math.floor(this.rows/2),s=Math.floor(this.cols/4),e=Math.floor(2*this.cols/3);for(let i=0;i<this.rows*this.cols;i++){let n=Math.floor(i/this.cols),a=i%this.cols;const o=new Node(n,a,n===t&&a==s,n===t&&a==e);this.nodes.push(o)}this.stateManager.setNodes(this.nodes)}async addRandomWalls(){this.clearGrid(),this.isGeneratingWalls=!0;const t=document.getElementById("wall-algorithm-select"),s=t?t.value:"random",e=new WallGenerator(this.nodes,this.rows,this.cols).generateWalls(s);this.animateWallsSequentially(e,0)}animateWallsSequentially(t,s){if(!this.isGeneratingWalls||s>=t.length)return this.isGeneratingWalls=!1,void(this.wallGenerationTimeouts=[]);const e=this.getWallAnimationConfig(),i=Math.min(s+e.batchSize,t.length);requestAnimationFrame((()=>{if(!this.isGeneratingWalls)return;for(let n=s;n<i;n++){const i=t[n],a=this.nodes[i],o=this.nodesElements[i];a.is_wall=!0,o.classList.add("node-wall"),(n-s)%e.animationFrequency==0&&o.classList.add("node-wall-animation")}const n=setTimeout((()=>{this.animateWallsSequentially(t,i)}),e.batchDelay);this.wallGenerationTimeouts.push(n)}))}stopWallGeneration(){this.isGeneratingWalls=!1,this.wallGenerationTimeouts.forEach((t=>clearTimeout(t))),this.wallGenerationTimeouts=[]}getWallAnimationConfig(){switch(this.stateManager.getAnimationSpeed()){case"slow":return{batchSize:2,batchDelay:120,animationFrequency:1};case"normal":default:return{batchSize:10,batchDelay:40,animationFrequency:2};case"fast":return{batchSize:50,batchDelay:8,animationFrequency:5}}}handleAlgoChange(t,s){if(this.stateManager.getState())return;this.clearPaths();const e=this.nodes.find((t=>t.is_start)),i=this.nodes.find((t=>t.is_finish)),n=this.nodesElements[e.row*this.cols+e.col],a=this.nodesElements[i.row*this.cols+i.col];n.classList.add("node-start"),a.classList.add("node-finish"),console.log(t),console.log(s)}clearGrid(){if(!this.stateManager.getState()){this.stopWallGeneration(),this.clearPaths();for(let t=0;t<this.nodes.length;t++){const s=this.nodes[t],e=this.nodesElements[t];s.is_wall&&(s.is_wall=!1,e.classList.remove("node-wall","node-wall-animation"))}}}clearPaths(){if(this.nodes)for(let t=0;t<this.nodes.length;t++){const s=this.nodesElements[t],e=s.style.backgroundColor;e&&(e.includes("0, 0, 66")||e.includes("0, 190, 218"))&&(s.style.backgroundColor=""),s.classList.remove("node-path","node-path-animation","node-visited-animation","node-updated-animation","node-current","node-current-animation","node-backtrack","node-backtrack-animation")}}async handleEvents(t,s){if(this.stateManager.getState())return;t.preventDefault();const e=t.target;if(!e||"TD"!==e.nodeName)return;let i=parseInt(e.id.split("-")[1]),n=parseInt(e.id.split("-")[2]),a=this.nodes[i*this.cols+n];const o=e.classList;switch(s){case"mousedown":this.is_mouse_pressed=!0,this.clearPaths(),o.contains("node-start")?(a.is_start=!1,o.remove("node-start"),this.currently_moving="node-start",this.last_hoverd_node=e):o.contains("node-finish")?(a.is_finish=!1,o.remove("node-finish"),this.currently_moving="node-finish",this.last_hoverd_node=e):(this.add_wall=!o.contains("node-wall"),o.toggle("node-wall",this.add_wall),a.is_wall=this.add_wall);break;case"mousemove":if(!this.is_mouse_pressed)return;this.currently_moving?(this.last_hoverd_node&&this.last_hoverd_node.classList.remove(this.currently_moving),o.add(this.currently_moving),this.last_hoverd_node=e):o.contains("node-start")||o.contains("node-finish")||(a.is_wall=this.add_wall,o.toggle("node-wall",this.add_wall));break;case"mouseup":if(this.is_mouse_pressed=!1,this.add_wall=!1,this.currently_moving&&this.last_hoverd_node){let t=parseInt(this.last_hoverd_node.id.split("-")[1]),s=parseInt(this.last_hoverd_node.id.split("-")[2]);const e=this.nodes[t*this.cols+s];this.last_hoverd_node.classList.contains("node-wall")&&(e.is_wall=!1,this.last_hoverd_node.classList.remove("node-wall")),e.is_start="node-start"==this.currently_moving,e.is_finish="node-finish"==this.currently_moving,this.last_hoverd_node.classList.add(this.currently_moving)}this.currently_moving=null,this.last_hoverd_node=null}}}
//# sourceMappingURL=GridCreator.js.map