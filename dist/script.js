import GridManager from"./grid/GridManager.js";import StateManager from"./StateManager.js";document.addEventListener("DOMContentLoaded",(async()=>{const e=document.querySelector("#grid"),t=document.querySelector(".navbar-buttons-visualize"),n=document.querySelector(".navbar-buttons-pause"),a=document.querySelector(".navbar-buttons-step-back"),r=document.querySelector(".navbar-buttons-step-forward"),o=document.querySelector(".navbar-buttons-clear"),i=document.querySelector(".navbar-buttons-random"),d=document.querySelector("#algorithm-select"),c=document.querySelector("#wall-algorithm-select"),s=document.querySelector("#animation-speed-select");let l="dijkstra",u="random",g="normal";if(!e)return;const m=new GridManager(e),S=new StateManager;function v(){const e=S.getState();o.disabled=e,i.disabled=e,d.disabled=e,c.disabled=e;const n=t.querySelector("i"),a=t.querySelector("span");e?(a&&(a.textContent="Stop"),n&&(n.setAttribute("data-lucide","square"),"undefined"!=typeof lucide&&lucide.createIcons()),t.style.background="linear-gradient(135deg, #ef4444 0%, #dc2626 100%)",m.gridAnimator.showControlButtons()):(a&&(a.textContent="Visualize"),n&&(n.setAttribute("data-lucide","play"),"undefined"!=typeof lucide&&lucide.createIcons()),t.style.background="",m.gridAnimator.hideControlButtons())}m.createGrid(),S.setAnimationSpeed(g),o.addEventListener("click",(()=>{S.getState()||(m.gridCreator.stopWallGeneration(),m.clearGrid())})),d.addEventListener("change",(function(e){if(!S.getState()){const e=l,t=this.value;m.handleAlgoChange(t,e),l=t}})),t.addEventListener("click",(async()=>{if(S.getState())m.gridAnimator.reset(),await new Promise((e=>requestAnimationFrame(e))),m.gridCreator.clearPaths(),setTimeout((()=>v()),10);else try{m.setAnimationSpeed(g),await m.visualize(l)}catch(e){console.error("Visualization error:",e)}finally{setTimeout((()=>v()),10)}})),n.addEventListener("click",(e=>{e.preventDefault(),m.gridAnimator.togglePauseResume()})),a.addEventListener("click",(e=>{e.preventDefault(),m.gridAnimator.stepBack()})),r.addEventListener("click",(e=>{e.preventDefault(),m.gridAnimator.stepForward()})),i.addEventListener("click",(async()=>{S.getState()||await m.addRandomWalls()})),c.addEventListener("change",(function(e){S.getState()||(u=this.value,console.log("Wall algorithm changed to:",u))})),s.addEventListener("change",(function(e){const t=this.value;g=t,S.setAnimationSpeed(t),m.setAnimationSpeed(t),console.log("Animation speed changed to:",t)})),v();const b=S.setState.bind(S);S.setState=function(e){b(e),v()}}));
//# sourceMappingURL=script.js.map