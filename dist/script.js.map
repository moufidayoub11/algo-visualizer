{"version":3,"sources":["script.js"],"names":["GridManager","StateManager","document","addEventListener","async","gridElement","querySelector","visualizeButton","pauseButton","stepBackButton","stepForwardButton","clearButton","random_button","algorithm_select","wallAlgorithm_select","animationSpeed_select","currentAlgo","currentWallAlgo","currentAnimationSpeed","grid","stateManager","updateButtonStates","globalState","getState","disabled","visualizeIcon","visualizeText","textContent","setAttribute","lucide","createIcons","style","background","gridAnimator","showControlButtons","hideControlButtons","createGrid","setAnimationSpeed","gridCreator","stopWallGeneration","clearGrid","e","oldAlgo","newAlgo","this","value","handleAlgoChange","reset","Promise","resolve","requestAnimationFrame","clearPaths","setTimeout","visualize","error","console","preventDefault","togglePauseResume","stepBack","stepForward","addRandomWalls","log","newSpeed","originalSetState","setState","bind","newState"],"mappings":"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","file":"script.js","sourcesContent":["import GridManager from \"./grid/GridManager.js\";\r\nimport StateManager from \"./StateManager.js\";\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", async () => {\r\n    const gridElement = document.querySelector(\"#grid\");\r\n    const visualizeButton = document.querySelector(\".navbar-buttons-visualize\");\r\n    const pauseButton = document.querySelector(\".navbar-buttons-pause\");\r\n    const stepBackButton = document.querySelector(\".navbar-buttons-step-back\");\r\n    const stepForwardButton = document.querySelector(\".navbar-buttons-step-forward\");\r\n    const clearButton = document.querySelector(\".navbar-buttons-clear\");\r\n    const random_button = document.querySelector(\".navbar-buttons-random\");\r\n    const algorithm_select = document.querySelector(\"#algorithm-select\");\r\n    const wallAlgorithm_select = document.querySelector(\"#wall-algorithm-select\");\r\n    const animationSpeed_select = document.querySelector(\"#animation-speed-select\");\r\n\r\n    let currentAlgo = \"dijkstra\";\r\n    let currentWallAlgo = \"random\";\r\n    let currentAnimationSpeed = \"normal\";\r\n\r\n    if (!gridElement) return;\r\n\r\n    const grid = new GridManager(gridElement);\r\n    const stateManager = new StateManager();\r\n    grid.createGrid();\r\n\r\n    // Initialize speed in global state\r\n    stateManager.setAnimationSpeed(currentAnimationSpeed);\r\n\r\n    // Update button states based on global state\r\n    function updateButtonStates() {\r\n        const globalState = stateManager.getState();\r\n        clearButton.disabled = globalState;\r\n        random_button.disabled = globalState;\r\n        algorithm_select.disabled = globalState;\r\n        wallAlgorithm_select.disabled = globalState;\r\n        // Don't disable speed selector - allow real-time changes\r\n        \r\n        const visualizeIcon = visualizeButton.querySelector('i');\r\n        const visualizeText = visualizeButton.querySelector('span');\r\n        \r\n        if (globalState) {\r\n            if (visualizeText) visualizeText.textContent = \"Stop\";\r\n            if (visualizeIcon) {\r\n                visualizeIcon.setAttribute('data-lucide', 'square');\r\n                if (typeof lucide !== 'undefined') {\r\n                    lucide.createIcons();\r\n                }\r\n            }\r\n            visualizeButton.style.background = \"linear-gradient(135deg, #ef4444 0%, #dc2626 100%)\";\r\n            grid.gridAnimator.showControlButtons();\r\n        } else {\r\n            if (visualizeText) visualizeText.textContent = \"Visualize\";\r\n            if (visualizeIcon) {\r\n                visualizeIcon.setAttribute('data-lucide', 'play');\r\n                if (typeof lucide !== 'undefined') {\r\n                    lucide.createIcons();\r\n                }\r\n            }\r\n            visualizeButton.style.background = \"\";\r\n            grid.gridAnimator.hideControlButtons();\r\n        }\r\n    }\r\n\r\n    clearButton.addEventListener(\"click\", () => {\r\n        const globalState = stateManager.getState();\r\n        if (!globalState) {\r\n            // Stop any ongoing wall generation before clearing\r\n            grid.gridCreator.stopWallGeneration();\r\n            grid.clearGrid();\r\n        }\r\n    });\r\n\r\n    algorithm_select.addEventListener(\"change\", function (e) {\r\n        const globalState = stateManager.getState();\r\n        if (!globalState) {\r\n            const oldAlgo = currentAlgo;\r\n            const newAlgo = this.value;\r\n            \r\n            grid.handleAlgoChange(newAlgo, oldAlgo);\r\n            currentAlgo = newAlgo;\r\n        }\r\n    });\r\n\r\n    visualizeButton.addEventListener(\"click\", async () => {\r\n        const globalState = stateManager.getState();\r\n        if (globalState) {\r\n            // When manually stopping, just clear everything except walls\r\n            \r\n            // Stop the animation first to prevent race conditions\r\n            grid.gridAnimator.reset();\r\n            \r\n            // Wait a frame to ensure all pending animations are cancelled\r\n            await new Promise(resolve => requestAnimationFrame(resolve));\r\n            \r\n            // Clear all paths and visualizations, keep only walls\r\n            grid.gridCreator.clearPaths();\r\n            \r\n            // Force update button states\r\n            setTimeout(() => updateButtonStates(), 10);\r\n        } else {\r\n            try {\r\n                // Set animation speed before starting visualization\r\n                grid.setAnimationSpeed(currentAnimationSpeed);\r\n                await grid.visualize(currentAlgo);\r\n            } catch (error) {\r\n                console.error(\"Visualization error:\", error);\r\n            } finally {\r\n                // Update button states when done\r\n                setTimeout(() => updateButtonStates(), 10);\r\n            }\r\n        }\r\n    });\r\n\r\n    // Single pause/resume button functionality\r\n    pauseButton.addEventListener(\"click\", (e) => {\r\n        e.preventDefault();\r\n        grid.gridAnimator.togglePauseResume();\r\n    });\r\n\r\n    stepBackButton.addEventListener(\"click\", (e) => {\r\n        e.preventDefault();\r\n        grid.gridAnimator.stepBack();\r\n    });\r\n\r\n    stepForwardButton.addEventListener(\"click\", (e) => {\r\n        e.preventDefault();\r\n        grid.gridAnimator.stepForward();\r\n    });\r\n\r\n    random_button.addEventListener(\"click\", async () => {\r\n        const globalState = stateManager.getState();\r\n        if (!globalState) {\r\n            await grid.addRandomWalls();\r\n        }\r\n    });\r\n\r\n    wallAlgorithm_select.addEventListener(\"change\", function (e) {\r\n        const globalState = stateManager.getState();\r\n        if (!globalState) {\r\n            currentWallAlgo = this.value;\r\n            console.log(\"Wall algorithm changed to:\", currentWallAlgo);\r\n        }\r\n    });\r\n\r\n    animationSpeed_select.addEventListener(\"change\", function (e) {\r\n        const newSpeed = this.value;\r\n        currentAnimationSpeed = newSpeed;\r\n        \r\n        // Update global state for real-time speed changes\r\n        stateManager.setAnimationSpeed(newSpeed);\r\n        \r\n        // Update grid animator speed\r\n        grid.setAnimationSpeed(newSpeed);\r\n        \r\n        console.log(\"Animation speed changed to:\", newSpeed);\r\n    });\r\n\r\n    // Initialize button states\r\n    updateButtonStates();\r\n    \r\n    // Listen for state changes\r\n    const originalSetState = stateManager.setState.bind(stateManager);\r\n    stateManager.setState = function(newState) {\r\n        originalSetState(newState);\r\n        updateButtonStates();\r\n    };\r\n});\r\n"]}