{"version":3,"sources":["AStar.js"],"names":["Node","Algorithm","Astar","constructor","nodes","super","solve","this","forEach","node","distance","Infinity","f","g","is_visited","in_open_set","prev","startNode","heuristic","finishNode","openSet","length","sortByHeuristic","current","shift","currentIndex","get_1d_index","row","col","is_wall","steps","push","type","indices","updateNeighbors","aStarGetPath","node1","node2","Math","abs","shortestPath","curr","unshift","neighbors","getNeighbors","neighbor","tentativeG","index","rows","cols","sort"],"mappings":"OAAOA,SAAU,yBACVC,cAAe,gCAEP,MAAMC,cAAcD,UAE/BE,WAAAA,CAAYC,GACRC,MAAMD,EACT,CAEDE,KAAAA,GAoBI,IAlBAC,KAAKH,MAAMI,SAASC,IAChBA,EAAKC,SAAWC,IAChBF,EAAKG,EAAID,IACTF,EAAKI,EAAIF,IACTF,EAAKK,YAAa,EAClBL,EAAKM,aAAc,EACnBN,EAAKO,KAAO,IAAZ,IAIJT,KAAKU,UAAUP,SAAW,EAC1BH,KAAKU,UAAUJ,EAAI,EACnBN,KAAKU,UAAUL,EAAIL,KAAKW,UAAUX,KAAKU,UAAWV,KAAKY,YACvDZ,KAAKU,UAAUF,aAAc,EAG7BR,KAAKa,QAAU,CAACb,KAAKU,WAEdV,KAAKa,QAAQC,OAAS,GAAG,CAE5Bd,KAAKe,gBAAgBf,KAAKa,SAC1B,IAAIG,EAAUhB,KAAKa,QAAQI,QAG3BD,EAAQR,aAAc,EAGtBQ,EAAQT,YAAa,EAErB,IAAIW,EAAelB,KAAKmB,aAAaH,EAAQI,IAAKJ,EAAQK,KAG1D,IAAIL,EAAQM,QAAZ,CASA,GANAtB,KAAKuB,MAAMC,KAAK,CACZC,KAAM,UACNC,QAAS,CAACR,KAIVF,IAAYhB,KAAKY,WAAY,MAGjCZ,KAAK2B,gBAAgBX,EAZA,CAaxB,CAgBD,OAdAhB,KAAKuB,MAAMC,KAAK,CACZC,KAAM,SACNC,QAAS1B,KAAK4B,iBAIlB5B,KAAKH,MAAMI,SAASC,IAChBA,EAAKC,SAAWC,IAChBF,EAAKG,EAAID,IACTF,EAAKI,EAAIF,IACTF,EAAKK,YAAa,EAClBL,EAAKM,aAAc,EACnBN,EAAKO,KAAO,IAAZ,IAEGT,KAAKuB,KACf,CAEDZ,SAAAA,CAAUkB,EAAOC,GACb,OACIC,KAAKC,IAAIH,EAAMT,IAAMU,EAAMV,KAAOW,KAAKC,IAAIH,EAAMR,IAAMS,EAAMT,IAEpE,CAEDO,YAAAA,CAAaZ,EAAUhB,KAAKY,YACxB,MAAMqB,EAAe,GACrB,IAAIC,EAAOlB,EAEX,KAAgB,OAATkB,GACHD,EAAaE,QAAQnC,KAAKmB,aAAae,EAAKd,IAAKc,EAAKb,MACtDa,EAAOA,EAAKzB,KAEhB,OAAOwB,CACV,CAEDN,eAAAA,CAAgBzB,GACZ,MAAMkC,EAAYpC,KAAKqC,aAAanC,GAEpC,IAAK,MAAMoC,KAAYF,EAAW,CAE9B,GAAIE,EAAShB,SAAWgB,EAAS/B,WAAY,SAG7C,MAAMgC,EAAarC,EAAKI,EAAI,EAG5B,GAAIiC,EAAaD,EAAShC,EAAG,CACzB,MAAMkC,EAAQxC,KAAKmB,aAAamB,EAASlB,IAAKkB,EAASjB,KAGvDiB,EAAS7B,KAAOP,EAChBoC,EAAShC,EAAIiC,EACbD,EAASnC,SAAWoC,EACpBD,EAASjC,EAAIkC,EAAavC,KAAKW,UAAU2B,EAAUtC,KAAKY,YAGnD0B,EAAS9B,cACV8B,EAAS9B,aAAc,EACvBR,KAAKa,QAAQW,KAAKc,IAGtBtC,KAAKuB,MAAMC,KAAK,CAAEC,KAAM,UAAWC,QAAS,CAACc,IAChD,CACJ,CACJ,CAEDH,YAAAA,CAAanC,GAET,MAAMkC,EAAY,IACZhB,IAAEA,EAAFC,IAAOA,GAAQnB,GACfuC,KAAEA,EAAFC,KAAQA,GAAS1C,KAWvB,OATIoB,EAAM,GACNgB,EAAUZ,KAAKxB,KAAKH,MAAMG,KAAKmB,aAAaC,EAAM,EAAGC,KACrDD,EAAMqB,EAAO,GACbL,EAAUZ,KAAKxB,KAAKH,MAAMG,KAAKmB,aAAaC,EAAM,EAAGC,KACrDA,EAAM,GACNe,EAAUZ,KAAKxB,KAAKH,MAAMG,KAAKmB,aAAaC,EAAKC,EAAM,KACvDA,EAAMqB,EAAO,GACbN,EAAUZ,KAAKxB,KAAKH,MAAMG,KAAKmB,aAAaC,EAAKC,EAAM,KAEpDe,CACV,CAEDrB,eAAAA,CAAgBlB,GACZA,EAAM8C,MAAK,CAACd,EAAOC,IAAUD,EAAMxB,EAAIyB,EAAMzB,GAChD","file":"AStar.js","sourcesContent":["import Node from \"../node/Node.js\";\nimport Algorithm from \"./Algorithm.js\";\n\nexport default class Astar extends Algorithm {\n    /**@param {Node[]} nodes  */\n    constructor(nodes) {\n        super(nodes);\n    }\n\n    solve() {\n        // Initialize all nodes\n        this.nodes.forEach((node) => {\n            node.distance = Infinity;\n            node.f = Infinity;\n            node.g = Infinity;\n            node.is_visited = false;\n            node.in_open_set = false;\n            node.prev = null;\n        });\n\n        // Initialize start node\n        this.startNode.distance = 0;\n        this.startNode.g = 0;\n        this.startNode.f = this.heuristic(this.startNode, this.finishNode);\n        this.startNode.in_open_set = true;\n\n        // Open set contains only unvisited nodes to be evaluated\n        this.openSet = [this.startNode];\n\n        while (this.openSet.length > 0) {\n            // Find node with lowest f score\n            this.sortByHeuristic(this.openSet);\n            let current = this.openSet.shift();\n            \n            // Remove from open set\n            current.in_open_set = false;\n            \n            // Add to closed set (mark as visited)\n            current.is_visited = true;\n            \n            let currentIndex = this.get_1d_index(current.row, current.col);\n            \n            // Skip walls\n            if (current.is_wall) continue;\n\n            // Add visualization step\n            this.steps.push({\n                type: \"visited\",\n                indices: [currentIndex],\n            });\n\n            // Check if we reached the goal\n            if (current === this.finishNode) break;\n\n            // Update neighbors\n            this.updateNeighbors(current);\n        }\n\n        this.steps.push({\n            type: \"finish\",\n            indices: this.aStarGetPath(),\n        });\n\n        // Clean up node properties\n        this.nodes.forEach((node) => {\n            node.distance = Infinity;\n            node.f = Infinity;\n            node.g = Infinity;\n            node.is_visited = false;\n            node.in_open_set = false;\n            node.prev = null;\n        });\n        return this.steps;\n    }\n\n    heuristic(node1, node2) {\n        return (\n            Math.abs(node1.row - node2.row) + Math.abs(node1.col - node2.col)\n        );\n    }\n\n    aStarGetPath(current = this.finishNode) {\n        const shortestPath = [];\n        let curr = current;\n\n        while (curr !== null) {\n            shortestPath.unshift(this.get_1d_index(curr.row, curr.col));\n            curr = curr.prev;\n        }\n        return shortestPath;\n    }\n\n    updateNeighbors(node) {\n        const neighbors = this.getNeighbors(node);\n\n        for (const neighbor of neighbors) {\n            // Skip walls and visited nodes\n            if (neighbor.is_wall || neighbor.is_visited) continue;\n            \n            // Calculate tentative g score\n            const tentativeG = node.g + 1;\n            \n            // If this path to neighbor is better than any previous one\n            if (tentativeG < neighbor.g) {\n                const index = this.get_1d_index(neighbor.row, neighbor.col);\n                \n                // Update neighbor\n                neighbor.prev = node;\n                neighbor.g = tentativeG;\n                neighbor.distance = tentativeG; // Keep for compatibility\n                neighbor.f = tentativeG + this.heuristic(neighbor, this.finishNode);\n\n                // Add to open set if not already there\n                if (!neighbor.in_open_set) {\n                    neighbor.in_open_set = true;\n                    this.openSet.push(neighbor);\n                }\n\n                this.steps.push({ type: \"updated\", indices: [index] });\n            }\n        }\n    }\n\n    getNeighbors(node) {\n        /**@type {Node[]} */\n        const neighbors = [];\n        const { row, col } = node;\n        const { rows, cols } = this;\n\n        if (row > 0)\n            neighbors.push(this.nodes[this.get_1d_index(row - 1, col)]);\n        if (row < rows - 1)\n            neighbors.push(this.nodes[this.get_1d_index(row + 1, col)]);\n        if (col > 0)\n            neighbors.push(this.nodes[this.get_1d_index(row, col - 1)]);\n        if (col < cols - 1)\n            neighbors.push(this.nodes[this.get_1d_index(row, col + 1)]);\n\n        return neighbors; // Return all neighbors, filtering happens in updateNeighbors\n    }\n\n    sortByHeuristic(nodes) {\n        nodes.sort((node1, node2) => node1.f - node2.f);\n    }\n}\n"]}