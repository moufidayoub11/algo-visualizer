{"version":3,"sources":["bfs.js"],"names":["Node","Algorithm","BreadthFirstSearch","constructor","nodes","super","solve","node","this","distance","Infinity","is_visited","prev","queue","startNode","length","current","shift","finishNode","currentIndex","get_1d_index","row","col","is_wall","steps","push","type","indices","updateNeighbors","bfsGetPath","shortestPath","unshift","neighbors","getNeighbors","neighbor","index","rows","cols","filter"],"mappings":"OAAOA,SAAU,yBACVC,cAAe,gCAEP,MAAMC,2BAA2BD,UAC5CE,WAAAA,CAAYC,GACRC,MAAMD,EACT,CAEDE,KAAAA,GACI,IAAK,IAAIC,KAAQC,KAAKJ,MAClBG,EAAKE,SAAWC,IAChBH,EAAKI,YAAa,EAClBJ,EAAKK,KAAO,KAIhB,IAFAJ,KAAKK,MAAQ,CAACL,KAAKM,WAEVN,KAAKK,MAAME,QAAQ,CACxB,IAAIC,EAAUR,KAAKK,MAAMI,QAEzB,GAAID,IAAYR,KAAKU,WAAY,MAEjC,IAAIC,EAAeX,KAAKY,aAAaJ,EAAQK,IAAKL,EAAQM,KAEtDN,EAAQL,YAAcK,EAAQO,UAElCP,EAAQL,YAAa,EACrBH,KAAKgB,MAAMC,KAAK,CACZC,KAAM,UACNC,QAAS,CAACR,KAGdX,KAAKoB,gBAAgBZ,GACxB,CAOD,OALAR,KAAKgB,MAAMC,KAAK,CACZC,KAAM,SACNC,QAASnB,KAAKqB,eAGXrB,KAAKgB,KACf,CAEDK,UAAAA,GACI,MAAMC,EAAe,GACrB,IAAId,EAAUR,KAAKU,WAEnB,KAAmB,OAAZF,GACHc,EAAaC,QAAQvB,KAAKY,aAAaJ,EAAQK,IAAKL,EAAQM,MAC5DN,EAAUA,EAAQJ,KAEtB,OAAOkB,CACV,CAEDF,eAAAA,CAAgBrB,GACZ,MAAMyB,EAAYxB,KAAKyB,aAAa1B,GAEpC,IAAK,MAAM2B,KAAYF,EAAW,CAC9B,MAAMG,EAAQ3B,KAAKY,aAAac,EAASb,IAAKa,EAASZ,KACvDY,EAAStB,KAAOL,EAChB2B,EAASzB,UAAY,GACrBD,KAAKgB,MAAMC,KAAK,CAAEC,KAAM,UAAWC,QAAS,CAACQ,KAC7C3B,KAAKK,MAAMY,KAAKS,EACnB,CACJ,CAEDD,YAAAA,CAAa1B,GACT,MAAMyB,EAAY,IACZX,IAAEA,EAAFC,IAAOA,GAAQf,GACf6B,KAAEA,EAAFC,KAAQA,GAAS7B,KAWvB,OATIa,EAAM,GACNW,EAAUP,KAAKjB,KAAKJ,MAAMI,KAAKY,aAAaC,EAAM,EAAGC,KACrDD,EAAMe,EAAO,GACbJ,EAAUP,KAAKjB,KAAKJ,MAAMI,KAAKY,aAAaC,EAAM,EAAGC,KACrDA,EAAM,GACNU,EAAUP,KAAKjB,KAAKJ,MAAMI,KAAKY,aAAaC,EAAKC,EAAM,KACvDA,EAAMe,EAAO,GACbL,EAAUP,KAAKjB,KAAKJ,MAAMI,KAAKY,aAAaC,EAAKC,EAAM,KAEpDU,EAAUM,QACZJ,IAAcA,EAASvB,aAAeuB,EAASX,SAEvD","file":"bfs.js","sourcesContent":["import Node from \"../node/Node.js\";\nimport Algorithm from \"./Algorithm.js\";\n\nexport default class BreadthFirstSearch extends Algorithm {\n    constructor(nodes) {\n        super(nodes);\n    }\n\n    solve() {\n        for (let node of this.nodes) {\n            node.distance = Infinity;\n            node.is_visited = false;\n            node.prev = null;\n        }\n        this.queue = [this.startNode];\n\n        while (!!this.queue.length) {\n            let current = this.queue.shift();\n\n            if (current === this.finishNode) break;\n\n            let currentIndex = this.get_1d_index(current.row, current.col);\n\n            if (current.is_visited || current.is_wall) continue;\n\n            current.is_visited = true;\n            this.steps.push({\n                type: \"visited\",\n                indices: [currentIndex],\n            });\n\n            this.updateNeighbors(current);\n        }\n\n        this.steps.push({\n            type: \"finish\",\n            indices: this.bfsGetPath(),\n        });\n\n        return this.steps;\n    }\n\n    bfsGetPath() {\n        const shortestPath = [];\n        let current = this.finishNode;\n\n        while (current !== null) {\n            shortestPath.unshift(this.get_1d_index(current.row, current.col));\n            current = current.prev;\n        }\n        return shortestPath;\n    }\n\n    updateNeighbors(node) {\n        const neighbors = this.getNeighbors(node);\n\n        for (const neighbor of neighbors) {\n            const index = this.get_1d_index(neighbor.row, neighbor.col);\n            neighbor.prev = node;\n            neighbor.distance = -12;\n            this.steps.push({ type: \"updated\", indices: [index] });\n            this.queue.push(neighbor);\n        }\n    }\n\n    getNeighbors(node) {\n        const neighbors = [];\n        const { row, col } = node;\n        const { rows, cols } = this;\n\n        if (row > 0)\n            neighbors.push(this.nodes[this.get_1d_index(row - 1, col)]);\n        if (row < rows - 1)\n            neighbors.push(this.nodes[this.get_1d_index(row + 1, col)]);\n        if (col > 0)\n            neighbors.push(this.nodes[this.get_1d_index(row, col - 1)]);\n        if (col < cols - 1)\n            neighbors.push(this.nodes[this.get_1d_index(row, col + 1)]);\n\n        return neighbors.filter(\n            (neighbor) => !neighbor.is_visited && !neighbor.is_wall\n        );\n    }\n}\n"]}