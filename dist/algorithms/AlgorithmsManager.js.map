{"version":3,"sources":["AlgorithmsManager.js"],"names":["Dijkstra","Node","Astar","DepthFirstSearch","BreadthFirstSearch","AlgorithmsManager","constructor","nodes","this","dijkstra","solve","aStar","depthFS","breadthFS"],"mappings":"OAAOA,aAAc,uBACdC,SAAU,yBACVC,UAAW,oBACXC,qBAAsB,kBACtBC,uBAAwB,0BAEhB,MAAMC,kBAEjBC,WAAAA,CAAYC,GACRC,KAAKD,MAAQA,CAChB,CAEDE,QAAAA,GAGI,OAFiB,IAAIT,SAASQ,KAAKD,OAEnBG,OACnB,CAEDC,KAAAA,GAGI,OAFc,IAAIT,MAAMM,KAAKD,OAEhBG,OAChB,CAEDE,OAAAA,GAGI,OAFY,IAAIT,iBAAiBK,KAAKD,OAE3BG,OACd,CAEDG,SAAAA,GAGI,OAFY,IAAIT,mBAAmBI,KAAKD,OAE7BG,OACd","file":"AlgorithmsManager.js","sourcesContent":["import Dijkstra from \"./dijkstra.js\";\nimport Node from \"../node/Node.js\";\nimport Astar from \"./AStar.js\";\nimport DepthFirstSearch from \"./dfs.js\";\nimport BreadthFirstSearch from \"./bfs.js\";\n\nexport default class AlgorithmsManager {\n    /**@param {Node[]} nodes  */\n    constructor(nodes) {\n        this.nodes = nodes;\n    }\n\n    dijkstra() {\n        const dijkstra = new Dijkstra(this.nodes);\n\n        return dijkstra.solve();\n    }\n\n    aStar() {\n        const astar = new Astar(this.nodes);\n\n        return astar.solve();\n    }\n\n    depthFS() {\n        const dfs = new DepthFirstSearch(this.nodes);\n\n        return dfs.solve();\n    }\n\n    breadthFS() {\n        const bfs = new BreadthFirstSearch(this.nodes);\n\n        return bfs.solve();\n    }\n}\n"]}