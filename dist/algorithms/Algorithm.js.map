{"version":3,"sources":["Algorithm.js"],"names":["StateManager","Node","Algorithm","constructor","nodes","this","stateManager","rows","getRows","cols","getCols","startNode","find","node","is_start","finishNode","is_finish","get_1d_index","row","col","steps","solve"],"mappings":"OAAOA,iBAAkB,4BAClBC,SAAU,iCAEF,MAAMC,UAEjBC,WAAAA,CAAYC,GACRC,KAAKC,aAAe,IAAIN,aACxBK,KAAKD,MAAQA,EACbC,KAAKE,KAAOF,KAAKC,aAAaE,UAC9BH,KAAKI,KAAOJ,KAAKC,aAAaI,UAC9BL,KAAKM,UAAYP,EAAMQ,MAAMC,GAASA,EAAKC,WAC3CT,KAAKU,WAAaX,EAAMQ,MAAMC,GAASA,EAAKG,YAC5CX,KAAKY,aAAe,CAACC,EAAKC,IAAQD,EAAMb,KAAKI,KAAOU,EACpDd,KAAKe,MAAQ,EAChB,CAEDC,KAAAA,GACI,OAAOhB,KAAKe,KACf","file":"Algorithm.js","sourcesContent":["import StateManager from \"../StateManager.js\";\nimport Node from \"../node/Node.js\";\n\nexport default class Algorithm {\n    /**@param {Node[]} nodes  */\n    constructor(nodes) {\n        this.stateManager = new StateManager();\n        this.nodes = nodes;\n        this.rows = this.stateManager.getRows();\n        this.cols = this.stateManager.getCols();\n        this.startNode = nodes.find((node) => node.is_start);\n        this.finishNode = nodes.find((node) => node.is_finish);\n        this.get_1d_index = (row, col) => row * this.cols + col;\n        this.steps = [];\n    }\n\n    solve() {\n        return this.steps;\n    }\n}\n"]}